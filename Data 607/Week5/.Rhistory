tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- tournament_raw[5:nrow(tournament_raw),]
name_row <- c()
for (i in seq(1,nrow(tournament_raw), by=3)){
name_row <- rbind(name_row,tournament_raw[i,])
}
state_row <- c()
for (i in seq(2,nrow(tournament_raw), by=3)){
state_row <- rbind(state_row,tournament_raw[i,])
}
name_state <- cbind(name_row, state_row)
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
View(name_state)
name_state$rank <- rank_final$V1
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
ranking_table <- name_state[,c("playerid","rank")]
ranking_table$playerid <- as.character(ranking_table$playerid)
names(ranking_table) <- c("Round1", "rank1")
merge(name_state,ranking_table, by="Round1")
View(ranking_table)
ranking_table <- name_state[,c("playerid","rank")]
View(ranking_table)
View(name_state)
names(ranking_table) <- c("Round1", "rank1")
merge(name_state,ranking_table, by="Round1")
?merge
merge.data.frame(name_state,ranking_table, by="Round1")
newdata <- merge.data.frame(name_state,ranking_table, by="Round1")
newdata <- merge(name_state,ranking_table)
?merge
?setkey
setkey(name_state,Round1)
str(name_state)
str(ranking_table)
name_state <- cbind(name_row, state_row)
str(name_state)
name_state <- cbind(name_row, state_row)
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
name_state$rank <- rank_final$V1
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
ranking_table <- name_state[,c("playerid","rank")]
names(ranking_table) <- c("Round1", "rank1")
newdata <- merge(name_state,ranking_table, "Round1")
newdata <- merge(name_state,ranking_table, "Round1", all.x = TRUE)
View(newdata)
str(name_state)
str(ranking_table)
name_state$playerid <- as.integer(name_state$playerid)
name_state[,4:10] <- as.integer(name_state[,4:10])
name_state[,4:10] <- lapply(name_state[,4:10], as.integer)
name_state$rank <- as.integer(name_state$rank)
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
name_state$rank <- rank_final$V1
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
ranking_table <- name_state[,c("playerid","rank")]
names(ranking_table) <- c("Round1", "rank1")
newdata <- merge(name_state,ranking_table, "Round1", all.x = TRUE)
name_state <- cbind(name_row, state_row)
tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- tournament_raw[5:nrow(tournament_raw),]
name_row <- c()
for (i in seq(1,nrow(tournament_raw), by=3)){
name_row <- rbind(name_row,tournament_raw[i,])
}
state_row <- c()
for (i in seq(2,nrow(tournament_raw), by=3)){
state_row <- rbind(state_row,tournament_raw[i,])
}
name_state <- cbind(name_row, state_row)
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
name_state$rank <- rank_final$V1
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
name_state$playerid <- as.integer(name_state$playerid)
name_state[,4:10] <- lapply(name_state[,4:10], as.integer)
name_state$rank <- as.integer(name_state$rank)
ranking_table <- name_state[,c("playerid","rank")]
names(ranking_table) <- c("Round1", "rank1")
newdata <- merge(name_state,ranking_table, "Round1", all.x = TRUE)
for (i in 1:7){
names(ranking_table) <- c(paste0("Round",i), paste0("rank",i))
name_state <- merge(name_state,ranking_table, paste0("Round",i), all.x = TRUE)
}
?mean
name_state$avgOppo <- mean(name_state[,13:19],na.rm = TRUE)
name_state[,13:19]
name_state$avgOppo <- lapply(name_state[,13:19], mean(na.rm = TRUE))
sapply
name_state$avgOppo <- lapply(name_state[,13:19], mean)
?colMeans
name_state$avgOppo <- colMeans(name_state[,13:19], na.rm=TRUE)
?rowMeans
name_state$avgOppo <- rowMeans(name_state[,13:19], na.rm=TRUE)
FinalDB <- name_state[,c("name","state","Total Pts", "rank","avgOppo")]
names(FinalDB) <- c("name","state","Total Pts", "Pre_Rating","Avg Pre Opponent Rating")
View(FinalDB)
knitr::opts_chunk$set(echo = TRUE)
tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- tournament_raw[5:nrow(tournament_raw),]
name_row <- c()
for (i in seq(1,nrow(tournament_raw), by=3)){
name_row <- rbind(name_row,tournament_raw[i,])
}
state_row <- c()
for (i in seq(2,nrow(tournament_raw), by=3)){
state_row <- rbind(state_row,tournament_raw[i,])
}
name_state <- cbind(name_row, state_row)
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- tournament_raw[5:nrow(tournament_raw),]
name_row <- c()
for (i in seq(1,nrow(tournament_raw), by=3)){
name_row <- rbind(name_row,tournament_raw[i,])
}
state_row <- c()
for (i in seq(2,nrow(tournament_raw), by=3)){
state_row <- rbind(state_row,tournament_raw[i,])
}
name_state <- cbind(name_row, state_row)
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
head(name_state)
tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- tournament_raw[5:nrow(tournament_raw),]
name_row <- c()
for (i in seq(1,nrow(tournament_raw), by=3)){
name_row <- rbind(name_row,tournament_raw[i,])
}
state_row <- c()
for (i in seq(2,nrow(tournament_raw), by=3)){
state_row <- rbind(state_row,tournament_raw[i,])
}
name_state <- cbind(name_row, state_row)
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
head(name_state)
##extract rank
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
name_state$rank <- rank_final$V1
##extract players played against
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
##extract rank
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
name_state$rank <- rank_final$V1
##extract players played against
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
head(name_state)
tournament_raw <- read.delim("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall 2017\\Data 607\\Week3\\Project\\tournamentinfo.txt", sep="|", header = FALSE, stringsAsFactors = FALSE)
tournament_raw <- tournament_raw[5:nrow(tournament_raw),]
name_row <- c()
for (i in seq(1,nrow(tournament_raw), by=3)){
name_row <- rbind(name_row,tournament_raw[i,])
}
state_row <- c()
for (i in seq(2,nrow(tournament_raw), by=3)){
state_row <- rbind(state_row,tournament_raw[i,])
}
name_state <- cbind(name_row, state_row)
##clean up
name_state <- name_state[,1:13]
names(name_state) <- c("playerid","name", "Total Pts", "Round1", "Round2", "Round3", "Round4","Round5","Round6","Round7","drop","state","rank")
name_state <- name_state[,!(names(name_state) %in% "drop")]
head(name_state)
##extract rank
library(stringr)
library(data.table)
rank <- data.table((str_split_fixed(name_state$rank," ",5)))
rank_final <- data.table(str_extract(rank$V5,"[:digit:]+"))
name_state$rank <- rank_final$V1
##extract players played against
playerlist <- c()
for (i in 1:7){
Roundname <- name_state[,names(name_state) %in% paste0("Round",i)]
Roundname <- str_extract(Roundname,"[:digit:]+")
name_state[,names(name_state) %in% paste0("Round",i)] <- Roundname
}
head(name_state)
##Format
name_state$playerid <- as.integer(name_state$playerid)
name_state[,4:10] <- lapply(name_state[,4:10], as.integer)
name_state$rank <- as.integer(name_state$rank)
##Another table of playerid and rank and merge
ranking_table <- name_state[,c("playerid","rank")]
##merge
for (i in 1:7){
names(ranking_table) <- c(paste0("Round",i), paste0("rank",i))
name_state <- merge(name_state,ranking_table, paste0("Round",i), all.x = TRUE)
}
(name_state)
##calculate the mean
name_state$avgOppo <- rowMeans(name_state[,13:19], na.rm=TRUE)
##Final condense DB
FinalDB <- name_state[,c("name","state","Total Pts", "rank","avgOppo")]
names(FinalDB) <- c("name","state","Total Pts", "Pre_Rating","Avg Pre Opponent Rating")
head(FinalDB)
#install.packages("ggplot2")
require(ggplot2)
head(diamonds)
# Identify which variables in the diamonds dataset are numeric, and which
# variables are categorical
str(diamonds)
# ggplot2:
qplot(price, data=diamonds)
plot(diamonds$price ~ diamonds$carat)
qplot(carat, price, data=diamonds)
setwd("C:\\Users\\soh1\\Box Sync\\CUNY\\Fall_2017\\Data 607\\Week5")
AirlineRaw <- read.csv("AirlieTime.csv")
AirlineRaw <- read.csv("AirlineTime.csv")
install.packages("tidyr")
library(tidyr)
library(dplyr)
View(AirlineRaw)
?gather
?spread
AirlineTrans %>%
gather(City, Frequency, 3:7) %>%
spread(Airplane, Key)
AirlineRaw %>%
gather(City, Frequency, 3:7) %>%
spread(Airplane, Key)
AirlineRaw %>%
gather(City, Frequency, 3:7)
install.packages("tidyselect")
AirlineRaw %>%
gather(City, Frequency, 3:7)
AirlineRaw %>%
gather(City, Frequency, 3:7) %>%
spread(Airplane, Time)
AirlineRaw %>%
gather(City, Frequency, 3:7) %>%
spread(Time, Frequency)
AirlineTrans <- AirlineRaw %>%
gather(City, Frequency, 3:7) %>%
spread(Time, Frequency)
View(AirlineTrans)
?summarise
AirlineSum <- summarise(AirlineTrans, TotalDelay = Sum(delayed))
AirlineSum <- summarise(AirlineTrans, TotalDelay = sum(delayed))
View(AirlineSum)
AirlineSum <- AirlineTrans %>%
group_by(Airplane) %>%
summarise(AirlineTrans, TotalDelay = sum(delayed))
View(AirlineSum)
AirlineSum <- AirlineTrans %>%
group_by(Airplane) %>%
summarise(TotalDelay = sum(delayed))
View(AirlineSum)
library(ggplot2)
?ggplot2
?`ggplot2-package`
?aes
ggplot(AirlineTrans) + aes(City,Delayed) + geom_bar(stat="identity", position=position_dodge())
ggplot(AirlineTrans) + aes(City,delayed) + geom_bar(stat="identity", position=position_dodge())
ggplot(AirlineTrans) + aes(City,delayed, fill=Airplane) + geom_bar(stat="identity", position=position_dodge())
ggplot(AirlineTrans) + aes(Airplane,delayed) + geom_bar(stat="identity", position=position_dodge())
View(AirlineSum)
ggplot(AirlineSum) + aes(Airplane,TotalDelay) + geom_bar(stat="identity", position=position_dodge())
ggplot(AirlineTrans) + aes(City,delayed, fill=Airplane) + geom_bar(stat="identity", position=position_dodge())
load("more/bdims.RData")
head(bdims)
bdims$elb.di
?dnorm
dnorm(1.1)
dnorm(0)
pnorm(0)
knitr::opts_chunk$set(echo = TRUE)
##a
1-pnorm(-1.13)
##b
pnorm(0.18)
##c
1-pnorm(8)
##d
pnorm(0.5)-pnorm(-0.5)
normalPlot <- function(mean,sd,lb,ub){
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n",
main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
}
mean = 0
sd = 1
normalPlot <- function(mean=0,sd=1,lb,ub){
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n",
main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
}
lb=-1.13 ; ub=100
normalPlot()
normalPlot(lb=-1.13,ub=100)
##Taking code from this site for graphing: http://www.statmethods.net/advgraphs/probability.html
normalPlot <- function(mean=0,sd=1,lb,ub){
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n",
main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
}
##a
1-pnorm(-1.13)
normalPlot(lb=-1.13,ub=100)
##b
pnorm(0.18)
##c
1-pnorm(8)
##d
pnorm(0.5)-pnorm(-0.5)
##Taking code from this site for graphing: http://www.statmethods.net/advgraphs/probability.html
normalPlot <- function(mean=0,sd=1,lb,ub){
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n",
main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
}
##a
1-pnorm(-1.13)
normalPlot(lb=-1.13,ub=100)
##b
pnorm(0.18)
normalPlot(lb=-100,ub=0,18)
##c
1-pnorm(8)
normalPlot(lb=8,ub=100)
##d
pnorm(0.5)-pnorm(-0.5)
normalPlot(lb=-0.5,ub=0.5)
##Taking code from this site for graphing: http://www.statmethods.net/advgraphs/probability.html
normalPlot <- function(mean=0,sd=1,lb,ub){
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n",
main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, hx)
polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
}
##a
1-pnorm(-1.13)
normalPlot(lb=-1.13,ub=100)
##b
pnorm(0.18)
normalPlot(lb=-100,ub=0.18)
##c
1-pnorm(8)
normalPlot(lb=8,ub=100)
##d
pnorm(0.5)-pnorm(-0.5)
normalPlot(lb=-0.5,ub=0.5)
dnorm(4948,4313,583)
?qnorm
qnorm(4948,4313,583)
(4948-4313)/583
(5513-5261)/807
(4948-4313)/583
pnorm(1.09)
(5513-5261)/807
pnorm(0.31)
exam <- c(57, 66, 69, 71, 72, 73, 74, 77, 78, 78, 79, 79, 81, 81, 82, 83, 83, 88, 89, 94)
exam[1]
##68% Range
61.52+4.58
61.52-4.58
##95% Range
61.52+2*4.58
61.52-2*4.58
##99.7% Range
61.52+3*4.58
61.52-3*4.58
exam <- c(54, 55, 56, 56, 57, 58, 58, 59, 60, 60, 60, 61, 61, 62, 62, 63, 63, 63, 64, 65, 65, 67, 67, 69, 73)
##68% Range
lb = 61.52+4.58
ub = 61.52-4.58
sum(exam > lb & exam < ub) / length(exam)
##95% Range
lb = 61.52+2*4.58
ub = 61.52-2*4.58
sum(exam > lb & exam < ub) / length(exam)
##99.7% Range
lb = 61.52+3*4.58
ub = 61.52-3*4.58
sum(exam > lb & exam < ub) / length(exam)
sum(exam > lb & exam < ub)
exam <- c(54, 55, 56, 56, 57, 58, 58, 59, 60, 60, 60, 61, 61, 62, 62, 63, 63, 63, 64, 65, 65, 67, 67, 69, 73)
##68% Range
ub = 61.52+4.58
lb = 61.52-4.58
sum(exam > lb & exam < ub) / length(exam)
##95% Range
ub = 61.52+2*4.58
lb = 61.52-2*4.58
sum(exam > lb & exam < ub) / length(exam)
##99.7% Range
ub = 61.52+3*4.58
lb = 61.52-3*4.58
sum(exam > lb & exam < ub) / length(exam)
qqnormsim(exam)
p = .02
n = 10
(1-p)^(n-1)*p
n=100
(1-p)^n
## Number of Transistors to see before first
1/p
## SD
sqrt((1-p)/p^2)
p=.05
## Number of Transistors to see before first
1/p
## SD
sqrt((1-p)/p^2)
3!
?dbinom
Pb = 0.51
dbinom(2,3,Pb)
6*0.51*0.51*0.49
3*0.51*0.51*0.49
dnbinom(3,10,0.15)
dnbinom(4,6,0.8)
pnbinom(4,6,0.8)
qnbinom(4,6,0.8)
?qbinom
0.8^4*0.2^2
dnbinom(5,6,0.8)
?dnbionom
?dnbinom
pnbinom(4,6,0.8)
pnbinom(4,6,0.2)
dnbinom(4,6,0.8)
dnbinom(3,10,0.9)
dnbinom(3,10,1)
dnbinom(3,10,0.3)
dnbinom(x = 3, size = 10, prob = 0.3)
dnbinom(x = 3, size = 10, prob = 0.15)
dnbinom(4,6,0.8)
dnbinom(3,5,0.8)*0.8
dbinom(3,5,0.8)*0.8
dbinom(2, 9, 0.15)*0.15
pnorm(1400, 1500, 300)
